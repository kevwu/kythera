// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Builtin data structures Lists [COMPL] Initialization from object list literal 1`] = `"let myTypeList = new KYTHERA.type(\\"list\\", { contains: new KYTHERA.type(\\"obj\\", {\\"a\\": KYTHERA.type.PRIMITIVES[\\"int\\"],\\"b\\": KYTHERA.type.PRIMITIVES[\\"str\\"],})}).makeNew();"`;

exports[`Builtin data structures Lists [PARSE] Access function returning list 1`] = `
Array [
  ParseNode {
    "identifier": "myListFn",
    "kind": "let",
    "value": ParseNode {
      "body": Array [
        ParseNode {
          "identifier": "result",
          "kind": "let",
          "value": ParseNode {
            "kind": "new",
            "target": ParseNode {
              "baseType": "list",
              "contains": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "kind": "type",
              "origin": "builtin",
            },
            "type": ParseNode {
              "baseType": "list",
              "contains": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
        ParseNode {
          "kind": "assign",
          "left": ParseNode {
            "index": ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "value": 0,
            },
            "kind": "access",
            "method": "bracket",
            "target": ParseNode {
              "kind": "identifier",
              "name": "result",
              "type": ParseNode {
                "baseType": "list",
                "contains": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
                "kind": "type",
                "origin": "builtin",
              },
            },
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
          "operator": "=",
          "right": ParseNode {
            "kind": "literal",
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
            "value": 10,
          },
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      ],
      "kind": "literal",
      "parameters": Array [],
      "returns": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
        "kind": "type",
        "origin": "builtin",
      },
      "type": ParseNode {
        "baseType": "fn",
        "kind": "type",
        "origin": "builtin",
        "parameters": Array [],
        "returns": ParseNode {
          "baseType": "list",
          "contains": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "kind": "type",
          "origin": "builtin",
        },
      },
    },
  },
  ParseNode {
    "index": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "value": 0,
    },
    "kind": "access",
    "method": "bracket",
    "target": ParseNode {
      "arguments": Array [],
      "kind": "call",
      "target": ParseNode {
        "kind": "identifier",
        "name": "myListFn",
        "type": ParseNode {
          "baseType": "fn",
          "kind": "type",
          "origin": "builtin",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "list",
            "contains": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "type": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
        "kind": "type",
        "origin": "builtin",
      },
    },
    "type": ParseNode {
      "baseType": "int",
      "kind": "type",
      "origin": "builtin",
    },
  },
]
`;

exports[`Builtin data structures Lists [PARSE] Initialization and assignment access 1`] = `
Array [
  ParseNode {
    "identifier": "myList",
    "kind": "let",
    "value": ParseNode {
      "kind": "new",
      "target": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
        "kind": "type",
        "origin": "builtin",
      },
      "type": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
  ParseNode {
    "kind": "assign",
    "left": ParseNode {
      "index": ParseNode {
        "kind": "literal",
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
        "value": 0,
      },
      "kind": "access",
      "method": "bracket",
      "target": ParseNode {
        "kind": "identifier",
        "name": "myList",
        "type": ParseNode {
          "baseType": "list",
          "contains": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "kind": "type",
          "origin": "builtin",
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
    "operator": "=",
    "right": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "value": 10,
    },
    "type": ParseNode {
      "baseType": "int",
      "kind": "type",
      "origin": "builtin",
    },
  },
]
`;

exports[`Builtin data structures Lists [PARSE] Initialization from object list literal 1`] = `
Array [
  ParseNode {
    "identifier": "myTypeList",
    "kind": "let",
    "value": ParseNode {
      "kind": "new",
      "target": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "baseType": "obj",
          "kind": "type",
          "origin": "builtin",
          "structure": Object {
            "a": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
            "b": ParseNode {
              "baseType": "str",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
        "kind": "type",
        "origin": "builtin",
      },
      "type": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "baseType": "obj",
          "kind": "type",
          "origin": "builtin",
          "structure": Object {
            "a": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
            "b": ParseNode {
              "baseType": "str",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Lists [PARSE] Initialization with custom type 1`] = `
Array [
  ParseNode {
    "identifier": "myType",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "type",
        "kind": "type",
        "origin": "builtin",
      },
      "value": ParseNode {
        "baseType": "obj",
        "kind": "type",
        "origin": "builtin",
        "structure": Object {
          "a": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "b": ParseNode {
            "baseType": "str",
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
    },
  },
  ParseNode {
    "identifier": "myTypeList",
    "kind": "let",
    "value": ParseNode {
      "kind": "new",
      "target": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "kind": "type",
          "name": "myType",
          "origin": "named",
        },
        "kind": "type",
        "origin": "builtin",
      },
      "type": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "kind": "type",
          "name": "myType",
          "origin": "named",
        },
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Lists List literals [COMPL] bool 1`] = `"let a = new KYTHERA.value([new KYTHERA.value(true, KYTHERA.type.PRIMITIVES[\\"bool\\"]),new KYTHERA.value(false, KYTHERA.type.PRIMITIVES[\\"bool\\"])], new KYTHERA.type(\\"list\\", { contains: KYTHERA.type.PRIMITIVES[\\"bool\\"]}));"`;

exports[`Builtin data structures Lists List literals [COMPL] float 1`] = `"let a = new KYTHERA.value([new KYTHERA.value(1.234, KYTHERA.type.PRIMITIVES[\\"float\\"]),new KYTHERA.value(3.14159, KYTHERA.type.PRIMITIVES[\\"float\\"])], new KYTHERA.type(\\"list\\", { contains: KYTHERA.type.PRIMITIVES[\\"float\\"]}));"`;

exports[`Builtin data structures Lists List literals [COMPL] fn 1`] = `"let a = new KYTHERA.value([new KYTHERA.value((a) => {return new KYTHERA.value(null, KYTHERA.type.PRIMITIVES[\\"null\\"]);}, new KYTHERA.type(\\"fn\\", { parameters: [KYTHERA.type.PRIMITIVES[\\"int\\"]], returns: KYTHERA.type.PRIMITIVES[\\"null\\"]})),new KYTHERA.value((b) => {return new KYTHERA.value(null, KYTHERA.type.PRIMITIVES[\\"null\\"]);}, new KYTHERA.type(\\"fn\\", { parameters: [KYTHERA.type.PRIMITIVES[\\"int\\"]], returns: KYTHERA.type.PRIMITIVES[\\"null\\"]}))], new KYTHERA.type(\\"list\\", { contains: new KYTHERA.type(\\"fn\\", { parameters: [KYTHERA.type.PRIMITIVES[\\"int\\"]], returns: KYTHERA.type.PRIMITIVES[\\"null\\"]})}));"`;

exports[`Builtin data structures Lists List literals [COMPL] int 1`] = `"let a = new KYTHERA.value([new KYTHERA.value(1, KYTHERA.type.PRIMITIVES[\\"int\\"]),new KYTHERA.value(2, KYTHERA.type.PRIMITIVES[\\"int\\"]),new KYTHERA.value(3, KYTHERA.type.PRIMITIVES[\\"int\\"]),new KYTHERA.value(4, KYTHERA.type.PRIMITIVES[\\"int\\"])], new KYTHERA.type(\\"list\\", { contains: KYTHERA.type.PRIMITIVES[\\"int\\"]}));"`;

exports[`Builtin data structures Lists List literals [COMPL] null 1`] = `"let a = new KYTHERA.value([new KYTHERA.value(null, KYTHERA.type.PRIMITIVES[\\"null\\"]),new KYTHERA.value(null, KYTHERA.type.PRIMITIVES[\\"null\\"])], new KYTHERA.type(\\"list\\", { contains: KYTHERA.type.PRIMITIVES[\\"null\\"]}));"`;

exports[`Builtin data structures Lists List literals [COMPL] obj 1`] = `"let a = new KYTHERA.value([new KYTHERA.value((() => {let thisObj = {value: {}};thisObj.value[\\"a\\"] = new KYTHERA.value(0, KYTHERA.type.PRIMITIVES[\\"int\\"]);thisObj.value[\\"b\\"] = new KYTHERA.value(\\"asdf\\", KYTHERA.type.PRIMITIVES[\\"str\\"]);return thisObj.value;})(), new KYTHERA.type(\\"obj\\", {\\"a\\": KYTHERA.type.PRIMITIVES[\\"int\\"],\\"b\\": KYTHERA.type.PRIMITIVES[\\"str\\"],})),new KYTHERA.value((() => {let thisObj = {value: {}};thisObj.value[\\"a\\"] = new KYTHERA.value(3, KYTHERA.type.PRIMITIVES[\\"int\\"]);thisObj.value[\\"b\\"] = new KYTHERA.value(\\"qwerty\\", KYTHERA.type.PRIMITIVES[\\"str\\"]);return thisObj.value;})(), new KYTHERA.type(\\"obj\\", {\\"a\\": KYTHERA.type.PRIMITIVES[\\"int\\"],\\"b\\": KYTHERA.type.PRIMITIVES[\\"str\\"],}))], new KYTHERA.type(\\"list\\", { contains: new KYTHERA.type(\\"obj\\", {\\"a\\": KYTHERA.type.PRIMITIVES[\\"int\\"],\\"b\\": KYTHERA.type.PRIMITIVES[\\"str\\"],})}));"`;

exports[`Builtin data structures Lists List literals [COMPL] str 1`] = `"let a = new KYTHERA.value([new KYTHERA.value(\\"hello\\", KYTHERA.type.PRIMITIVES[\\"str\\"]),new KYTHERA.value(\\"world\\", KYTHERA.type.PRIMITIVES[\\"str\\"])], new KYTHERA.type(\\"list\\", { contains: KYTHERA.type.PRIMITIVES[\\"str\\"]}));"`;

exports[`Builtin data structures Lists List literals [COMPL] type 1`] = `"let a = new KYTHERA.value([new KYTHERA.value(KYTHERA.type.PRIMITIVES[\\"int\\"], KYTHERA.type.PRIMITIVES[\\"type\\"]),new KYTHERA.value(KYTHERA.type.PRIMITIVES[\\"float\\"], KYTHERA.type.PRIMITIVES[\\"type\\"]),new KYTHERA.value(new KYTHERA.type(\\"fn\\", { parameters: [KYTHERA.type.PRIMITIVES[\\"int\\"]], returns: KYTHERA.type.PRIMITIVES[\\"null\\"]}), KYTHERA.type.PRIMITIVES[\\"type\\"])], new KYTHERA.type(\\"list\\", { contains: KYTHERA.type.PRIMITIVES[\\"type\\"]}));"`;

exports[`Builtin data structures Lists List literals [EVALT] bool 1`] = `
Object {
  "a":  {
    "type":  {
      "baseType": "list",
      "structure": Object {
        "contains":  {
          "baseType": "bool",
        },
      },
    },
    "value": Array [
       {
        "type":  {
          "baseType": "bool",
        },
        "value": true,
      },
       {
        "type":  {
          "baseType": "bool",
        },
        "value": false,
      },
    ],
  },
}
`;

exports[`Builtin data structures Lists List literals [EVALT] float 1`] = `
Object {
  "a":  {
    "type":  {
      "baseType": "list",
      "structure": Object {
        "contains":  {
          "baseType": "float",
        },
      },
    },
    "value": Array [
       {
        "type":  {
          "baseType": "float",
        },
        "value": 1.234,
      },
       {
        "type":  {
          "baseType": "float",
        },
        "value": 3.14159,
      },
    ],
  },
}
`;

exports[`Builtin data structures Lists List literals [EVALT] fn 1`] = `
Object {
  "a":  {
    "type":  {
      "baseType": "list",
      "structure": Object {
        "contains":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [
               {
                "baseType": "int",
              },
            ],
            "returns":  {
              "baseType": "null",
            },
          },
        },
      },
    },
    "value": Array [
       {
        "type":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [
               {
                "baseType": "int",
              },
            ],
            "returns":  {
              "baseType": "null",
            },
          },
        },
        "value": [Function],
      },
       {
        "type":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [
               {
                "baseType": "int",
              },
            ],
            "returns":  {
              "baseType": "null",
            },
          },
        },
        "value": [Function],
      },
    ],
  },
}
`;

exports[`Builtin data structures Lists List literals [EVALT] int 1`] = `
Object {
  "a":  {
    "type":  {
      "baseType": "list",
      "structure": Object {
        "contains":  {
          "baseType": "int",
        },
      },
    },
    "value": Array [
       {
        "type":  {
          "baseType": "int",
        },
        "value": 1,
      },
       {
        "type":  {
          "baseType": "int",
        },
        "value": 2,
      },
       {
        "type":  {
          "baseType": "int",
        },
        "value": 3,
      },
       {
        "type":  {
          "baseType": "int",
        },
        "value": 4,
      },
    ],
  },
}
`;

exports[`Builtin data structures Lists List literals [EVALT] null 1`] = `
Object {
  "a":  {
    "type":  {
      "baseType": "list",
      "structure": Object {
        "contains":  {
          "baseType": "null",
        },
      },
    },
    "value": Array [
       {
        "type":  {
          "baseType": "null",
        },
        "value": null,
      },
       {
        "type":  {
          "baseType": "null",
        },
        "value": null,
      },
    ],
  },
}
`;

exports[`Builtin data structures Lists List literals [EVALT] obj 1`] = `
Object {
  "a":  {
    "type":  {
      "baseType": "list",
      "structure": Object {
        "contains":  {
          "baseType": "obj",
          "structure": Object {
            "a":  {
              "baseType": "int",
            },
            "b":  {
              "baseType": "str",
            },
          },
        },
      },
    },
    "value": Array [
       {
        "type":  {
          "baseType": "obj",
          "structure": Object {
            "a":  {
              "baseType": "int",
            },
            "b":  {
              "baseType": "str",
            },
          },
        },
        "value": Object {
          "a":  {
            "type":  {
              "baseType": "int",
            },
            "value": 0,
          },
          "b":  {
            "type":  {
              "baseType": "str",
            },
            "value": "asdf",
          },
        },
      },
       {
        "type":  {
          "baseType": "obj",
          "structure": Object {
            "a":  {
              "baseType": "int",
            },
            "b":  {
              "baseType": "str",
            },
          },
        },
        "value": Object {
          "a":  {
            "type":  {
              "baseType": "int",
            },
            "value": 3,
          },
          "b":  {
            "type":  {
              "baseType": "str",
            },
            "value": "qwerty",
          },
        },
      },
    ],
  },
}
`;

exports[`Builtin data structures Lists List literals [EVALT] str 1`] = `
Object {
  "a":  {
    "type":  {
      "baseType": "list",
      "structure": Object {
        "contains":  {
          "baseType": "str",
        },
      },
    },
    "value": Array [
       {
        "type":  {
          "baseType": "str",
        },
        "value": "hello",
      },
       {
        "type":  {
          "baseType": "str",
        },
        "value": "world",
      },
    ],
  },
}
`;

exports[`Builtin data structures Lists List literals [EVALT] type 1`] = `
Object {
  "a":  {
    "type":  {
      "baseType": "list",
      "structure": Object {
        "contains":  {
          "baseType": "type",
        },
      },
    },
    "value": Array [
       {
        "type":  {
          "baseType": "type",
        },
        "value":  {
          "baseType": "int",
        },
      },
       {
        "type":  {
          "baseType": "type",
        },
        "value":  {
          "baseType": "float",
        },
      },
       {
        "type":  {
          "baseType": "type",
        },
        "value":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [
               {
                "baseType": "int",
              },
            ],
            "returns":  {
              "baseType": "null",
            },
          },
        },
      },
    ],
  },
}
`;

exports[`Builtin data structures Lists List literals [PARSE] bool 1`] = `
Array [
  ParseNode {
    "identifier": "a",
    "kind": "let",
    "value": ParseNode {
      "elements": Array [
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "bool",
            "kind": "type",
            "origin": "builtin",
          },
          "value": true,
        },
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "bool",
            "kind": "type",
            "origin": "builtin",
          },
          "value": false,
        },
      ],
      "kind": "literal",
      "type": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "baseType": "bool",
          "kind": "type",
          "origin": "builtin",
        },
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Lists List literals [PARSE] float 1`] = `
Array [
  ParseNode {
    "identifier": "a",
    "kind": "let",
    "value": ParseNode {
      "elements": Array [
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "float",
            "kind": "type",
            "origin": "builtin",
          },
          "value": 1.234,
        },
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "float",
            "kind": "type",
            "origin": "builtin",
          },
          "value": 3.14159,
        },
      ],
      "kind": "literal",
      "type": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "baseType": "float",
          "kind": "type",
          "origin": "builtin",
        },
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Lists List literals [PARSE] fn 1`] = `
Array [
  ParseNode {
    "identifier": "a",
    "kind": "let",
    "value": ParseNode {
      "elements": Array [
        ParseNode {
          "body": Array [
            ParseNode {
              "kind": "return",
              "value": ParseNode {
                "kind": "literal",
                "type": ParseNode {
                  "baseType": "null",
                  "kind": "type",
                  "origin": "builtin",
                },
                "value": null,
              },
            },
          ],
          "kind": "literal",
          "parameters": Array [
            Object {
              "name": "a",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
          ],
          "returns": ParseNode {
            "baseType": "null",
            "kind": "type",
            "origin": "builtin",
          },
          "type": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [
              ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            ],
            "returns": ParseNode {
              "baseType": "null",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
        ParseNode {
          "body": Array [
            ParseNode {
              "kind": "return",
              "value": ParseNode {
                "kind": "literal",
                "type": ParseNode {
                  "baseType": "null",
                  "kind": "type",
                  "origin": "builtin",
                },
                "value": null,
              },
            },
          ],
          "kind": "literal",
          "parameters": Array [
            Object {
              "name": "b",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
          ],
          "returns": ParseNode {
            "baseType": "null",
            "kind": "type",
            "origin": "builtin",
          },
          "type": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [
              ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            ],
            "returns": ParseNode {
              "baseType": "null",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      ],
      "kind": "literal",
      "type": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "baseType": "fn",
          "kind": "type",
          "origin": "builtin",
          "parameters": Array [
            ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          ],
          "returns": ParseNode {
            "baseType": "null",
            "kind": "type",
            "origin": "builtin",
          },
        },
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Lists List literals [PARSE] int 1`] = `
Array [
  ParseNode {
    "identifier": "a",
    "kind": "let",
    "value": ParseNode {
      "elements": Array [
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "value": 1,
        },
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "value": 2,
        },
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "value": 3,
        },
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "value": 4,
        },
      ],
      "kind": "literal",
      "type": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Lists List literals [PARSE] null 1`] = `
Array [
  ParseNode {
    "identifier": "a",
    "kind": "let",
    "value": ParseNode {
      "elements": Array [
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "null",
            "kind": "type",
            "origin": "builtin",
          },
          "value": null,
        },
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "null",
            "kind": "type",
            "origin": "builtin",
          },
          "value": null,
        },
      ],
      "kind": "literal",
      "type": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "baseType": "null",
          "kind": "type",
          "origin": "builtin",
        },
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Lists List literals [PARSE] obj 1`] = `
Array [
  ParseNode {
    "identifier": "a",
    "kind": "let",
    "value": ParseNode {
      "elements": Array [
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "obj",
            "kind": "type",
            "origin": "builtin",
            "structure": Object {
              "a": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "b": ParseNode {
                "baseType": "str",
                "kind": "type",
                "origin": "builtin",
              },
            },
          },
          "value": Object {
            "a": ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "value": 0,
            },
            "b": ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "str",
                "kind": "type",
                "origin": "builtin",
              },
              "value": "asdf",
            },
          },
        },
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "obj",
            "kind": "type",
            "origin": "builtin",
            "structure": Object {
              "a": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "b": ParseNode {
                "baseType": "str",
                "kind": "type",
                "origin": "builtin",
              },
            },
          },
          "value": Object {
            "a": ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "value": 3,
            },
            "b": ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "str",
                "kind": "type",
                "origin": "builtin",
              },
              "value": "qwerty",
            },
          },
        },
      ],
      "kind": "literal",
      "type": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "baseType": "obj",
          "kind": "type",
          "origin": "builtin",
          "structure": Object {
            "a": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
            "b": ParseNode {
              "baseType": "str",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Lists List literals [PARSE] str 1`] = `
Array [
  ParseNode {
    "identifier": "a",
    "kind": "let",
    "value": ParseNode {
      "elements": Array [
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "str",
            "kind": "type",
            "origin": "builtin",
          },
          "value": "hello",
        },
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "str",
            "kind": "type",
            "origin": "builtin",
          },
          "value": "world",
        },
      ],
      "kind": "literal",
      "type": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "baseType": "str",
          "kind": "type",
          "origin": "builtin",
        },
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Lists List literals [PARSE] type 1`] = `
Array [
  ParseNode {
    "identifier": "a",
    "kind": "let",
    "value": ParseNode {
      "elements": Array [
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "type",
            "kind": "type",
            "origin": "builtin",
          },
          "value": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "type",
            "kind": "type",
            "origin": "builtin",
          },
          "value": ParseNode {
            "baseType": "float",
            "kind": "type",
            "origin": "builtin",
          },
        },
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "type",
            "kind": "type",
            "origin": "builtin",
          },
          "value": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [
              ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            ],
            "returns": ParseNode {
              "baseType": "null",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      ],
      "kind": "literal",
      "type": ParseNode {
        "baseType": "list",
        "contains": ParseNode {
          "baseType": "type",
          "kind": "type",
          "origin": "builtin",
        },
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Objects [COMPL] Access variables in outer scope 1`] = `"let g = new KYTHERA.value(10, KYTHERA.type.PRIMITIVES[\\"int\\"]);let myObj = new KYTHERA.value((() => {let thisObj = {value: {}};thisObj.value[\\"a\\"] = new KYTHERA.value(() => {return (KYTHERA.value.add(g, new KYTHERA.value(10, KYTHERA.type.PRIMITIVES[\\"int\\"])));}, new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]}));return thisObj.value;})(), new KYTHERA.type(\\"obj\\", {\\"a\\": new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]}),}));let out = myObj.value.a.value();"`;

exports[`Builtin data structures Objects [COMPL] Object access 1`] = `"let myObj = new KYTHERA.value((() => {let thisObj = {value: {}};thisObj.value[\\"a\\"] = new KYTHERA.value(10, KYTHERA.type.PRIMITIVES[\\"int\\"]);return thisObj.value;})(), new KYTHERA.type(\\"obj\\", {\\"a\\": KYTHERA.type.PRIMITIVES[\\"int\\"],}));let out = myObj.value.a;"`;

exports[`Builtin data structures Objects [COMPL] Object insertion 1`] = `"let myObj = new KYTHERA.value((() => {let thisObj = {value: {}};thisObj.value[\\"a\\"] = new KYTHERA.value(10, KYTHERA.type.PRIMITIVES[\\"int\\"]);return thisObj.value;})(), new KYTHERA.type(\\"obj\\", {\\"a\\": KYTHERA.type.PRIMITIVES[\\"int\\"],}));let out1 = myObj.value.a;(myObj.value.a = new KYTHERA.value(20, KYTHERA.type.PRIMITIVES[\\"int\\"]));let out2 = myObj.value.a;"`;

exports[`Builtin data structures Objects [EVALT] Access variables in outer scope 1`] = `
Object {
  "g":  {
    "type":  {
      "baseType": "int",
    },
    "value": 10,
  },
  "myObj":  {
    "type":  {
      "baseType": "obj",
      "structure": Object {
        "a":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [],
            "returns":  {
              "baseType": "int",
            },
          },
        },
      },
    },
    "value": Object {
      "a":  {
        "type":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [],
            "returns":  {
              "baseType": "int",
            },
          },
        },
        "value": [Function],
      },
    },
  },
  "out":  {
    "type":  {
      "baseType": "int",
    },
    "value": 20,
  },
}
`;

exports[`Builtin data structures Objects [EVALT] Object access 1`] = `
Object {
  "myObj":  {
    "type":  {
      "baseType": "obj",
      "structure": Object {
        "a":  {
          "baseType": "int",
        },
      },
    },
    "value": Object {
      "a":  {
        "type":  {
          "baseType": "int",
        },
        "value": 10,
      },
    },
  },
  "out":  {
    "type":  {
      "baseType": "int",
    },
    "value": 10,
  },
}
`;

exports[`Builtin data structures Objects [EVALT] Object insertion 1`] = `
Object {
  "myObj":  {
    "type":  {
      "baseType": "obj",
      "structure": Object {
        "a":  {
          "baseType": "int",
        },
      },
    },
    "value": Object {
      "a":  {
        "type":  {
          "baseType": "int",
        },
        "value": 20,
      },
    },
  },
  "out1":  {
    "type":  {
      "baseType": "int",
    },
    "value": 10,
  },
  "out2":  {
    "type":  {
      "baseType": "int",
    },
    "value": 20,
  },
}
`;

exports[`Builtin data structures Objects [PARSE] Access variables in outer scope 1`] = `
Array [
  ParseNode {
    "identifier": "g",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "value": 10,
    },
  },
  ParseNode {
    "identifier": "myObj",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "obj",
        "kind": "type",
        "origin": "builtin",
        "structure": Object {
          "a": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      },
      "value": Object {
        "a": ParseNode {
          "body": Array [
            ParseNode {
              "kind": "return",
              "value": ParseNode {
                "kind": "binary",
                "left": ParseNode {
                  "kind": "identifier",
                  "name": "g",
                  "type": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                },
                "operator": "+",
                "right": ParseNode {
                  "kind": "literal",
                  "type": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                  "value": 10,
                },
                "type": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
            },
          ],
          "kind": "literal",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "type": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      },
    },
  },
  ParseNode {
    "identifier": "out",
    "kind": "let",
    "value": ParseNode {
      "arguments": Array [],
      "kind": "call",
      "target": ParseNode {
        "index": "a",
        "kind": "access",
        "method": "dot",
        "target": ParseNode {
          "kind": "identifier",
          "name": "myObj",
          "type": ParseNode {
            "baseType": "obj",
            "kind": "type",
            "origin": "builtin",
            "structure": Object {
              "a": ParseNode {
                "baseType": "fn",
                "kind": "type",
                "origin": "builtin",
                "parameters": Array [],
                "returns": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
            },
          },
        },
        "type": ParseNode {
          "baseType": "fn",
          "kind": "type",
          "origin": "builtin",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Objects [PARSE] Object access 1`] = `
Array [
  ParseNode {
    "identifier": "myObj",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "obj",
        "kind": "type",
        "origin": "builtin",
        "structure": Object {
          "a": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "value": Object {
        "a": ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "value": 10,
        },
      },
    },
  },
  ParseNode {
    "identifier": "out",
    "kind": "let",
    "value": ParseNode {
      "index": "a",
      "kind": "access",
      "method": "dot",
      "target": ParseNode {
        "kind": "identifier",
        "name": "myObj",
        "type": ParseNode {
          "baseType": "obj",
          "kind": "type",
          "origin": "builtin",
          "structure": Object {
            "a": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Objects [PARSE] Object insertion 1`] = `
Array [
  ParseNode {
    "identifier": "myObj",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "obj",
        "kind": "type",
        "origin": "builtin",
        "structure": Object {
          "a": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "value": Object {
        "a": ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "value": 10,
        },
      },
    },
  },
  ParseNode {
    "identifier": "out1",
    "kind": "let",
    "value": ParseNode {
      "index": "a",
      "kind": "access",
      "method": "dot",
      "target": ParseNode {
        "kind": "identifier",
        "name": "myObj",
        "type": ParseNode {
          "baseType": "obj",
          "kind": "type",
          "origin": "builtin",
          "structure": Object {
            "a": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
  ParseNode {
    "kind": "assign",
    "left": ParseNode {
      "index": "a",
      "kind": "access",
      "method": "dot",
      "target": ParseNode {
        "kind": "identifier",
        "name": "myObj",
        "type": ParseNode {
          "baseType": "obj",
          "kind": "type",
          "origin": "builtin",
          "structure": Object {
            "a": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
    "operator": "=",
    "right": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "value": 20,
    },
    "type": ParseNode {
      "baseType": "int",
      "kind": "type",
      "origin": "builtin",
    },
  },
  ParseNode {
    "identifier": "out2",
    "kind": "let",
    "value": ParseNode {
      "index": "a",
      "kind": "access",
      "method": "dot",
      "target": ParseNode {
        "kind": "identifier",
        "name": "myObj",
        "type": ParseNode {
          "baseType": "obj",
          "kind": "type",
          "origin": "builtin",
          "structure": Object {
            "a": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Objects \`this\` reference [COMPL] Deferred array 1`] = `"let myObj = new KYTHERA.value((() => {let thisObj = {value: {}};thisObj.value[\\"a\\"] = new KYTHERA.value(() => {return (thisObj).value.b.value[(new KYTHERA.value(0, KYTHERA.type.PRIMITIVES[\\"int\\"])).value];}, new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]}));thisObj.value[\\"b\\"] = new KYTHERA.value([new KYTHERA.value(1, KYTHERA.type.PRIMITIVES[\\"int\\"]),new KYTHERA.value(2, KYTHERA.type.PRIMITIVES[\\"int\\"]),new KYTHERA.value(3, KYTHERA.type.PRIMITIVES[\\"int\\"])], new KYTHERA.type(\\"list\\", { contains: KYTHERA.type.PRIMITIVES[\\"int\\"]}));return thisObj.value;})(), new KYTHERA.type(\\"obj\\", {\\"b\\": new KYTHERA.type(\\"list\\", { contains: KYTHERA.type.PRIMITIVES[\\"int\\"]}),\\"a\\": new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]}),}));let out = myObj.value.a.value();"`;

exports[`Builtin data structures Objects \`this\` reference [COMPL] Deferred object 1`] = `"let myObj = new KYTHERA.value((() => {let thisObj = {value: {}};thisObj.value[\\"a\\"] = new KYTHERA.value(() => {return (thisObj).value.b.value.c;}, new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]}));thisObj.value[\\"b\\"] = new KYTHERA.value((() => {let thisObj = {value: {}};thisObj.value[\\"c\\"] = new KYTHERA.value(10, KYTHERA.type.PRIMITIVES[\\"int\\"]);return thisObj.value;})(), new KYTHERA.type(\\"obj\\", {\\"c\\": KYTHERA.type.PRIMITIVES[\\"int\\"],}));return thisObj.value;})(), new KYTHERA.type(\\"obj\\", {\\"b\\": new KYTHERA.type(\\"obj\\", {\\"c\\": KYTHERA.type.PRIMITIVES[\\"int\\"],}),\\"a\\": new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]}),}));let out = myObj.value.a.value();"`;

exports[`Builtin data structures Objects \`this\` reference [COMPL] Use \`this\` on entry defined after usage 1`] = `"let myObj = new KYTHERA.value((() => {let thisObj = {value: {}};thisObj.value[\\"c\\"] = new KYTHERA.value(() => {return (KYTHERA.value.add((thisObj).value.a, new KYTHERA.value(10, KYTHERA.type.PRIMITIVES[\\"int\\"])));}, new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]}));thisObj.value[\\"a\\"] = new KYTHERA.value(5, KYTHERA.type.PRIMITIVES[\\"int\\"]);return thisObj.value;})(), new KYTHERA.type(\\"obj\\", {\\"a\\": KYTHERA.type.PRIMITIVES[\\"int\\"],\\"c\\": new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]}),}));let out = myObj.value.c.value();"`;

exports[`Builtin data structures Objects \`this\` reference [COMPL] Use in access assignment 1`] = `"let myObj = new KYTHERA.value((() => {let thisObj = {value: {}};thisObj.value[\\"a\\"] = new KYTHERA.value(10, KYTHERA.type.PRIMITIVES[\\"int\\"]);thisObj.value[\\"c\\"] = new KYTHERA.value(() => {return (KYTHERA.value.add(new KYTHERA.value(42, KYTHERA.type.PRIMITIVES[\\"int\\"]), (thisObj).value.a));}, new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]}));return thisObj.value;})(), new KYTHERA.type(\\"obj\\", {\\"a\\": KYTHERA.type.PRIMITIVES[\\"int\\"],\\"c\\": new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]}),}));let out1 = myObj.value.c.value();(myObj.value.c = new KYTHERA.value(() => {return (KYTHERA.value.add((KYTHERA.value.add(new KYTHERA.value(42, KYTHERA.type.PRIMITIVES[\\"int\\"]), (myObj).value.a)), new KYTHERA.value(10, KYTHERA.type.PRIMITIVES[\\"int\\"])));}, new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]})));let out2 = myObj.value.c.value();"`;

exports[`Builtin data structures Objects \`this\` reference [COMPL] Use returned object 1`] = `"let myObj = new KYTHERA.value((() => {let thisObj = {value: {}};thisObj.value[\\"b\\"] = new KYTHERA.value(\\"asdf\\", KYTHERA.type.PRIMITIVES[\\"str\\"]);thisObj.value[\\"c\\"] = new KYTHERA.value(() => {return (KYTHERA.value.add((KYTHERA.value.add((thisObj).value.a, new KYTHERA.value(10, KYTHERA.type.PRIMITIVES[\\"int\\"]))), (thisObj).value.d.value().value()));}, new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]}));thisObj.value[\\"d\\"] = new KYTHERA.value(() => {return new KYTHERA.value(() => {return new KYTHERA.value(10, KYTHERA.type.PRIMITIVES[\\"int\\"]);}, new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]}));}, new KYTHERA.type(\\"fn\\", { parameters: [], returns: new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]})}));thisObj.value[\\"a\\"] = new KYTHERA.value(5, KYTHERA.type.PRIMITIVES[\\"int\\"]);return thisObj.value;})(), new KYTHERA.type(\\"obj\\", {\\"b\\": KYTHERA.type.PRIMITIVES[\\"str\\"],\\"a\\": KYTHERA.type.PRIMITIVES[\\"int\\"],\\"d\\": new KYTHERA.type(\\"fn\\", { parameters: [], returns: new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]})}),\\"c\\": new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]}),}));let myResult = myObj.value.c.value();(myObj.value.c = new KYTHERA.value(() => {return (KYTHERA.value.add((myObj).value.a, new KYTHERA.value(45, KYTHERA.type.PRIMITIVES[\\"int\\"])));}, new KYTHERA.type(\\"fn\\", { parameters: [], returns: KYTHERA.type.PRIMITIVES[\\"int\\"]})));let myResult2 = myObj.value.c.value();"`;

exports[`Builtin data structures Objects \`this\` reference [EVALT] Deferred array 1`] = `
Object {
  "myObj":  {
    "type":  {
      "baseType": "obj",
      "structure": Object {
        "a":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [],
            "returns":  {
              "baseType": "int",
            },
          },
        },
        "b":  {
          "baseType": "list",
          "structure": Object {
            "contains":  {
              "baseType": "int",
            },
          },
        },
      },
    },
    "value": Object {
      "a":  {
        "type":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [],
            "returns":  {
              "baseType": "int",
            },
          },
        },
        "value": [Function],
      },
      "b":  {
        "type":  {
          "baseType": "list",
          "structure": Object {
            "contains":  {
              "baseType": "int",
            },
          },
        },
        "value": Array [
           {
            "type":  {
              "baseType": "int",
            },
            "value": 1,
          },
           {
            "type":  {
              "baseType": "int",
            },
            "value": 2,
          },
           {
            "type":  {
              "baseType": "int",
            },
            "value": 3,
          },
        ],
      },
    },
  },
  "out":  {
    "type":  {
      "baseType": "int",
    },
    "value": 1,
  },
}
`;

exports[`Builtin data structures Objects \`this\` reference [EVALT] Deferred object 1`] = `
Object {
  "myObj":  {
    "type":  {
      "baseType": "obj",
      "structure": Object {
        "a":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [],
            "returns":  {
              "baseType": "int",
            },
          },
        },
        "b":  {
          "baseType": "obj",
          "structure": Object {
            "c":  {
              "baseType": "int",
            },
          },
        },
      },
    },
    "value": Object {
      "a":  {
        "type":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [],
            "returns":  {
              "baseType": "int",
            },
          },
        },
        "value": [Function],
      },
      "b":  {
        "type":  {
          "baseType": "obj",
          "structure": Object {
            "c":  {
              "baseType": "int",
            },
          },
        },
        "value": Object {
          "c":  {
            "type":  {
              "baseType": "int",
            },
            "value": 10,
          },
        },
      },
    },
  },
  "out":  {
    "type":  {
      "baseType": "int",
    },
    "value": 10,
  },
}
`;

exports[`Builtin data structures Objects \`this\` reference [EVALT] Use \`this\` on entry defined after usage 1`] = `
Object {
  "myObj":  {
    "type":  {
      "baseType": "obj",
      "structure": Object {
        "a":  {
          "baseType": "int",
        },
        "c":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [],
            "returns":  {
              "baseType": "int",
            },
          },
        },
      },
    },
    "value": Object {
      "a":  {
        "type":  {
          "baseType": "int",
        },
        "value": 5,
      },
      "c":  {
        "type":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [],
            "returns":  {
              "baseType": "int",
            },
          },
        },
        "value": [Function],
      },
    },
  },
  "out":  {
    "type":  {
      "baseType": "int",
    },
    "value": 15,
  },
}
`;

exports[`Builtin data structures Objects \`this\` reference [EVALT] Use in access assignment 1`] = `
Object {
  "myObj":  {
    "type":  {
      "baseType": "obj",
      "structure": Object {
        "a":  {
          "baseType": "int",
        },
        "c":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [],
            "returns":  {
              "baseType": "int",
            },
          },
        },
      },
    },
    "value": Object {
      "a":  {
        "type":  {
          "baseType": "int",
        },
        "value": 10,
      },
      "c":  {
        "type":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [],
            "returns":  {
              "baseType": "int",
            },
          },
        },
        "value": [Function],
      },
    },
  },
  "out1":  {
    "type":  {
      "baseType": "int",
    },
    "value": 52,
  },
  "out2":  {
    "type":  {
      "baseType": "int",
    },
    "value": 62,
  },
}
`;

exports[`Builtin data structures Objects \`this\` reference [EVALT] Use returned object 1`] = `
Object {
  "myObj":  {
    "type":  {
      "baseType": "obj",
      "structure": Object {
        "a":  {
          "baseType": "int",
        },
        "b":  {
          "baseType": "str",
        },
        "c":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [],
            "returns":  {
              "baseType": "int",
            },
          },
        },
        "d":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [],
            "returns":  {
              "baseType": "fn",
              "structure": Object {
                "parameters": Array [],
                "returns":  {
                  "baseType": "int",
                },
              },
            },
          },
        },
      },
    },
    "value": Object {
      "a":  {
        "type":  {
          "baseType": "int",
        },
        "value": 5,
      },
      "b":  {
        "type":  {
          "baseType": "str",
        },
        "value": "asdf",
      },
      "c":  {
        "type":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [],
            "returns":  {
              "baseType": "int",
            },
          },
        },
        "value": [Function],
      },
      "d":  {
        "type":  {
          "baseType": "fn",
          "structure": Object {
            "parameters": Array [],
            "returns":  {
              "baseType": "fn",
              "structure": Object {
                "parameters": Array [],
                "returns":  {
                  "baseType": "int",
                },
              },
            },
          },
        },
        "value": [Function],
      },
    },
  },
  "myResult":  {
    "type":  {
      "baseType": "int",
    },
    "value": 25,
  },
  "myResult2":  {
    "type":  {
      "baseType": "int",
    },
    "value": 50,
  },
}
`;

exports[`Builtin data structures Objects \`this\` reference [PARSE] Deferred array 1`] = `
Array [
  ParseNode {
    "identifier": "myObj",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "obj",
        "kind": "type",
        "origin": "builtin",
        "structure": Object {
          "a": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
          "b": ParseNode {
            "baseType": "list",
            "contains": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "value": Object {
        "a": ParseNode {
          "body": Array [
            ParseNode {
              "kind": "return",
              "value": ParseNode {
                "index": ParseNode {
                  "kind": "literal",
                  "type": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                  "value": 0,
                },
                "kind": "access",
                "method": "bracket",
                "target": ParseNode {
                  "index": "b",
                  "kind": "access",
                  "method": "dot",
                  "target": ParseNode {
                    "kind": "this",
                    "type": ParseNode {
                      "baseType": "obj",
                      "kind": "type",
                      "origin": "builtin",
                      "structure": Object {
                        "a": ParseNode {
                          "baseType": "fn",
                          "kind": "type",
                          "origin": "builtin",
                          "parameters": Array [],
                          "returns": ParseNode {
                            "baseType": "int",
                            "kind": "type",
                            "origin": "builtin",
                          },
                        },
                        "b": ParseNode {
                          "baseType": "list",
                          "contains": ParseNode {
                            "baseType": "int",
                            "kind": "type",
                            "origin": "builtin",
                          },
                          "kind": "type",
                          "origin": "builtin",
                        },
                      },
                    },
                  },
                  "type": ParseNode {
                    "deferred": true,
                    "kind": "type",
                    "origin": "deferred",
                  },
                },
                "type": ParseNode {
                  "baseType": "any",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
            },
          ],
          "kind": "literal",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "type": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
        "b": ParseNode {
          "elements": Array [
            ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "value": 1,
            },
            ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "value": 2,
            },
            ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "value": 3,
            },
          ],
          "kind": "literal",
          "type": ParseNode {
            "baseType": "list",
            "contains": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
    },
  },
  ParseNode {
    "identifier": "out",
    "kind": "let",
    "value": ParseNode {
      "arguments": Array [],
      "kind": "call",
      "target": ParseNode {
        "index": "a",
        "kind": "access",
        "method": "dot",
        "target": ParseNode {
          "kind": "identifier",
          "name": "myObj",
          "type": ParseNode {
            "baseType": "obj",
            "kind": "type",
            "origin": "builtin",
            "structure": Object {
              "a": ParseNode {
                "baseType": "fn",
                "kind": "type",
                "origin": "builtin",
                "parameters": Array [],
                "returns": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
              "b": ParseNode {
                "baseType": "list",
                "contains": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
                "kind": "type",
                "origin": "builtin",
              },
            },
          },
        },
        "type": ParseNode {
          "baseType": "fn",
          "kind": "type",
          "origin": "builtin",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Objects \`this\` reference [PARSE] Deferred object 1`] = `
Array [
  ParseNode {
    "identifier": "myObj",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "obj",
        "kind": "type",
        "origin": "builtin",
        "structure": Object {
          "a": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
          "b": ParseNode {
            "baseType": "obj",
            "kind": "type",
            "origin": "builtin",
            "structure": Object {
              "c": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
          },
        },
      },
      "value": Object {
        "a": ParseNode {
          "body": Array [
            ParseNode {
              "kind": "return",
              "value": ParseNode {
                "index": "c",
                "kind": "access",
                "method": "dot",
                "target": ParseNode {
                  "index": "b",
                  "kind": "access",
                  "method": "dot",
                  "target": ParseNode {
                    "kind": "this",
                    "type": ParseNode {
                      "baseType": "obj",
                      "kind": "type",
                      "origin": "builtin",
                      "structure": Object {
                        "a": ParseNode {
                          "baseType": "fn",
                          "kind": "type",
                          "origin": "builtin",
                          "parameters": Array [],
                          "returns": ParseNode {
                            "baseType": "int",
                            "kind": "type",
                            "origin": "builtin",
                          },
                        },
                        "b": ParseNode {
                          "baseType": "obj",
                          "kind": "type",
                          "origin": "builtin",
                          "structure": Object {
                            "c": ParseNode {
                              "baseType": "int",
                              "kind": "type",
                              "origin": "builtin",
                            },
                          },
                        },
                      },
                    },
                  },
                  "type": ParseNode {
                    "deferred": true,
                    "kind": "type",
                    "origin": "deferred",
                    "structure": Object {
                      "c": ParseNode {
                        "deferred": true,
                        "kind": "type",
                        "origin": "deferred",
                      },
                    },
                  },
                },
                "type": ParseNode {
                  "deferred": true,
                  "kind": "type",
                  "origin": "deferred",
                },
              },
            },
          ],
          "kind": "literal",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "type": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
        "b": ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "obj",
            "kind": "type",
            "origin": "builtin",
            "structure": Object {
              "c": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
          },
          "value": Object {
            "c": ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "value": 10,
            },
          },
        },
      },
    },
  },
  ParseNode {
    "identifier": "out",
    "kind": "let",
    "value": ParseNode {
      "arguments": Array [],
      "kind": "call",
      "target": ParseNode {
        "index": "a",
        "kind": "access",
        "method": "dot",
        "target": ParseNode {
          "kind": "identifier",
          "name": "myObj",
          "type": ParseNode {
            "baseType": "obj",
            "kind": "type",
            "origin": "builtin",
            "structure": Object {
              "a": ParseNode {
                "baseType": "fn",
                "kind": "type",
                "origin": "builtin",
                "parameters": Array [],
                "returns": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
              "b": ParseNode {
                "baseType": "obj",
                "kind": "type",
                "origin": "builtin",
                "structure": Object {
                  "c": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                },
              },
            },
          },
        },
        "type": ParseNode {
          "baseType": "fn",
          "kind": "type",
          "origin": "builtin",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Objects \`this\` reference [PARSE] Use \`this\` on entry defined after usage 1`] = `
Array [
  ParseNode {
    "identifier": "myObj",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "obj",
        "kind": "type",
        "origin": "builtin",
        "structure": Object {
          "a": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "c": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      },
      "value": Object {
        "a": ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "value": 5,
        },
        "c": ParseNode {
          "body": Array [
            ParseNode {
              "kind": "return",
              "value": ParseNode {
                "kind": "binary",
                "left": ParseNode {
                  "index": "a",
                  "kind": "access",
                  "method": "dot",
                  "target": ParseNode {
                    "kind": "this",
                    "type": ParseNode {
                      "baseType": "obj",
                      "kind": "type",
                      "origin": "builtin",
                      "structure": Object {
                        "a": ParseNode {
                          "baseType": "int",
                          "kind": "type",
                          "origin": "builtin",
                        },
                        "c": ParseNode {
                          "baseType": "fn",
                          "kind": "type",
                          "origin": "builtin",
                          "parameters": Array [],
                          "returns": ParseNode {
                            "baseType": "int",
                            "kind": "type",
                            "origin": "builtin",
                          },
                        },
                      },
                    },
                  },
                  "type": ParseNode {
                    "deferred": true,
                    "kind": "type",
                    "origin": "deferred",
                  },
                },
                "operator": "+",
                "right": ParseNode {
                  "kind": "literal",
                  "type": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                  "value": 10,
                },
                "type": ParseNode {
                  "deferred": true,
                  "kind": "type",
                  "origin": "deferred",
                },
              },
            },
          ],
          "kind": "literal",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "type": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      },
    },
  },
  ParseNode {
    "identifier": "out",
    "kind": "let",
    "value": ParseNode {
      "arguments": Array [],
      "kind": "call",
      "target": ParseNode {
        "index": "c",
        "kind": "access",
        "method": "dot",
        "target": ParseNode {
          "kind": "identifier",
          "name": "myObj",
          "type": ParseNode {
            "baseType": "obj",
            "kind": "type",
            "origin": "builtin",
            "structure": Object {
              "a": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "c": ParseNode {
                "baseType": "fn",
                "kind": "type",
                "origin": "builtin",
                "parameters": Array [],
                "returns": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
            },
          },
        },
        "type": ParseNode {
          "baseType": "fn",
          "kind": "type",
          "origin": "builtin",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Objects \`this\` reference [PARSE] Use in access assignment 1`] = `
Array [
  ParseNode {
    "identifier": "myObj",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "obj",
        "kind": "type",
        "origin": "builtin",
        "structure": Object {
          "a": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "c": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      },
      "value": Object {
        "a": ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "value": 10,
        },
        "c": ParseNode {
          "body": Array [
            ParseNode {
              "kind": "return",
              "value": ParseNode {
                "kind": "binary",
                "left": ParseNode {
                  "kind": "literal",
                  "type": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                  "value": 42,
                },
                "operator": "+",
                "right": ParseNode {
                  "index": "a",
                  "kind": "access",
                  "method": "dot",
                  "target": ParseNode {
                    "kind": "this",
                    "type": ParseNode {
                      "baseType": "obj",
                      "kind": "type",
                      "origin": "builtin",
                      "structure": Object {
                        "a": ParseNode {
                          "baseType": "int",
                          "kind": "type",
                          "origin": "builtin",
                        },
                        "c": ParseNode {
                          "baseType": "fn",
                          "kind": "type",
                          "origin": "builtin",
                          "parameters": Array [],
                          "returns": ParseNode {
                            "baseType": "int",
                            "kind": "type",
                            "origin": "builtin",
                          },
                        },
                      },
                    },
                  },
                  "type": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                },
                "type": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
            },
          ],
          "kind": "literal",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "type": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      },
    },
  },
  ParseNode {
    "identifier": "out1",
    "kind": "let",
    "value": ParseNode {
      "arguments": Array [],
      "kind": "call",
      "target": ParseNode {
        "index": "c",
        "kind": "access",
        "method": "dot",
        "target": ParseNode {
          "kind": "identifier",
          "name": "myObj",
          "type": ParseNode {
            "baseType": "obj",
            "kind": "type",
            "origin": "builtin",
            "structure": Object {
              "a": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "c": ParseNode {
                "baseType": "fn",
                "kind": "type",
                "origin": "builtin",
                "parameters": Array [],
                "returns": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
            },
          },
        },
        "type": ParseNode {
          "baseType": "fn",
          "kind": "type",
          "origin": "builtin",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
  ParseNode {
    "kind": "assign",
    "left": ParseNode {
      "index": "c",
      "kind": "access",
      "method": "dot",
      "target": ParseNode {
        "kind": "identifier",
        "name": "myObj",
        "type": ParseNode {
          "baseType": "obj",
          "kind": "type",
          "origin": "builtin",
          "structure": Object {
            "a": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
            "c": ParseNode {
              "baseType": "fn",
              "kind": "type",
              "origin": "builtin",
              "parameters": Array [],
              "returns": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
          },
        },
      },
      "type": ParseNode {
        "baseType": "fn",
        "kind": "type",
        "origin": "builtin",
        "parameters": Array [],
        "returns": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
    },
    "operator": "=",
    "right": ParseNode {
      "body": Array [
        ParseNode {
          "kind": "return",
          "value": ParseNode {
            "kind": "binary",
            "left": ParseNode {
              "kind": "binary",
              "left": ParseNode {
                "kind": "literal",
                "type": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
                "value": 42,
              },
              "operator": "+",
              "right": ParseNode {
                "index": "a",
                "kind": "access",
                "method": "dot",
                "target": ParseNode {
                  "kind": "this",
                  "type": ParseNode {
                    "baseType": "obj",
                    "kind": "type",
                    "origin": "builtin",
                    "structure": Object {
                      "a": ParseNode {
                        "baseType": "int",
                        "kind": "type",
                        "origin": "builtin",
                      },
                      "c": ParseNode {
                        "baseType": "fn",
                        "kind": "type",
                        "origin": "builtin",
                        "parameters": Array [],
                        "returns": ParseNode {
                          "baseType": "int",
                          "kind": "type",
                          "origin": "builtin",
                        },
                      },
                    },
                  },
                },
                "type": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
            "operator": "+",
            "right": ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "value": 10,
            },
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      ],
      "kind": "literal",
      "parameters": Array [],
      "returns": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "type": ParseNode {
        "baseType": "fn",
        "kind": "type",
        "origin": "builtin",
        "parameters": Array [],
        "returns": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
    },
    "type": ParseNode {
      "baseType": "fn",
      "kind": "type",
      "origin": "builtin",
      "parameters": Array [],
      "returns": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
  ParseNode {
    "identifier": "out2",
    "kind": "let",
    "value": ParseNode {
      "arguments": Array [],
      "kind": "call",
      "target": ParseNode {
        "index": "c",
        "kind": "access",
        "method": "dot",
        "target": ParseNode {
          "kind": "identifier",
          "name": "myObj",
          "type": ParseNode {
            "baseType": "obj",
            "kind": "type",
            "origin": "builtin",
            "structure": Object {
              "a": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "c": ParseNode {
                "baseType": "fn",
                "kind": "type",
                "origin": "builtin",
                "parameters": Array [],
                "returns": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
            },
          },
        },
        "type": ParseNode {
          "baseType": "fn",
          "kind": "type",
          "origin": "builtin",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Builtin data structures Objects \`this\` reference [PARSE] Use returned object 1`] = `
Array [
  ParseNode {
    "identifier": "myObj",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "obj",
        "kind": "type",
        "origin": "builtin",
        "structure": Object {
          "a": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "b": ParseNode {
            "baseType": "str",
            "kind": "type",
            "origin": "builtin",
          },
          "c": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
          "d": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "fn",
              "kind": "type",
              "origin": "builtin",
              "parameters": Array [],
              "returns": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
          },
        },
      },
      "value": Object {
        "a": ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "value": 5,
        },
        "b": ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "str",
            "kind": "type",
            "origin": "builtin",
          },
          "value": "asdf",
        },
        "c": ParseNode {
          "body": Array [
            ParseNode {
              "kind": "return",
              "value": ParseNode {
                "kind": "binary",
                "left": ParseNode {
                  "kind": "binary",
                  "left": ParseNode {
                    "index": "a",
                    "kind": "access",
                    "method": "dot",
                    "target": ParseNode {
                      "kind": "this",
                      "type": ParseNode {
                        "baseType": "obj",
                        "kind": "type",
                        "origin": "builtin",
                        "structure": Object {
                          "a": ParseNode {
                            "baseType": "int",
                            "kind": "type",
                            "origin": "builtin",
                          },
                          "b": ParseNode {
                            "baseType": "str",
                            "kind": "type",
                            "origin": "builtin",
                          },
                          "c": ParseNode {
                            "baseType": "fn",
                            "kind": "type",
                            "origin": "builtin",
                            "parameters": Array [],
                            "returns": ParseNode {
                              "baseType": "int",
                              "kind": "type",
                              "origin": "builtin",
                            },
                          },
                          "d": ParseNode {
                            "baseType": "fn",
                            "kind": "type",
                            "origin": "builtin",
                            "parameters": Array [],
                            "returns": ParseNode {
                              "baseType": "fn",
                              "kind": "type",
                              "origin": "builtin",
                              "parameters": Array [],
                              "returns": ParseNode {
                                "baseType": "int",
                                "kind": "type",
                                "origin": "builtin",
                              },
                            },
                          },
                        },
                      },
                    },
                    "type": ParseNode {
                      "deferred": true,
                      "kind": "type",
                      "origin": "deferred",
                    },
                  },
                  "operator": "+",
                  "right": ParseNode {
                    "kind": "literal",
                    "type": ParseNode {
                      "baseType": "int",
                      "kind": "type",
                      "origin": "builtin",
                    },
                    "value": 10,
                  },
                  "type": ParseNode {
                    "deferred": true,
                    "kind": "type",
                    "origin": "deferred",
                  },
                },
                "operator": "+",
                "right": ParseNode {
                  "arguments": Array [],
                  "kind": "call",
                  "target": ParseNode {
                    "arguments": Array [],
                    "kind": "call",
                    "target": ParseNode {
                      "index": "d",
                      "kind": "access",
                      "method": "dot",
                      "target": ParseNode {
                        "kind": "this",
                        "type": ParseNode {
                          "baseType": "obj",
                          "kind": "type",
                          "origin": "builtin",
                          "structure": Object {
                            "a": ParseNode {
                              "baseType": "int",
                              "kind": "type",
                              "origin": "builtin",
                            },
                            "b": ParseNode {
                              "baseType": "str",
                              "kind": "type",
                              "origin": "builtin",
                            },
                            "c": ParseNode {
                              "baseType": "fn",
                              "kind": "type",
                              "origin": "builtin",
                              "parameters": Array [],
                              "returns": ParseNode {
                                "baseType": "int",
                                "kind": "type",
                                "origin": "builtin",
                              },
                            },
                            "d": ParseNode {
                              "baseType": "fn",
                              "kind": "type",
                              "origin": "builtin",
                              "parameters": Array [],
                              "returns": ParseNode {
                                "baseType": "fn",
                                "kind": "type",
                                "origin": "builtin",
                                "parameters": Array [],
                                "returns": ParseNode {
                                  "baseType": "int",
                                  "kind": "type",
                                  "origin": "builtin",
                                },
                              },
                            },
                          },
                        },
                      },
                      "type": ParseNode {
                        "deferred": true,
                        "kind": "type",
                        "origin": "deferred",
                        "returns": ParseNode {
                          "deferred": true,
                          "kind": "type",
                          "origin": "deferred",
                          "returns": ParseNode {
                            "deferred": true,
                            "kind": "type",
                            "origin": "deferred",
                          },
                        },
                      },
                    },
                    "type": ParseNode {
                      "deferred": true,
                      "kind": "type",
                      "origin": "deferred",
                      "returns": ParseNode {
                        "deferred": true,
                        "kind": "type",
                        "origin": "deferred",
                      },
                    },
                  },
                  "type": ParseNode {
                    "deferred": true,
                    "kind": "type",
                    "origin": "deferred",
                  },
                },
                "type": ParseNode {
                  "deferred": true,
                  "kind": "type",
                  "origin": "deferred",
                },
              },
            },
          ],
          "kind": "literal",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "type": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
        "d": ParseNode {
          "body": Array [
            ParseNode {
              "kind": "return",
              "value": ParseNode {
                "body": Array [
                  ParseNode {
                    "kind": "return",
                    "value": ParseNode {
                      "kind": "literal",
                      "type": ParseNode {
                        "baseType": "int",
                        "kind": "type",
                        "origin": "builtin",
                      },
                      "value": 10,
                    },
                  },
                ],
                "kind": "literal",
                "parameters": Array [],
                "returns": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
                "type": ParseNode {
                  "baseType": "fn",
                  "kind": "type",
                  "origin": "builtin",
                  "parameters": Array [],
                  "returns": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                },
              },
            },
          ],
          "kind": "literal",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
          "type": ParseNode {
            "baseType": "fn",
            "kind": "type",
            "origin": "builtin",
            "parameters": Array [],
            "returns": ParseNode {
              "baseType": "fn",
              "kind": "type",
              "origin": "builtin",
              "parameters": Array [],
              "returns": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
          },
        },
      },
    },
  },
  ParseNode {
    "identifier": "myResult",
    "kind": "let",
    "value": ParseNode {
      "arguments": Array [],
      "kind": "call",
      "target": ParseNode {
        "index": "c",
        "kind": "access",
        "method": "dot",
        "target": ParseNode {
          "kind": "identifier",
          "name": "myObj",
          "type": ParseNode {
            "baseType": "obj",
            "kind": "type",
            "origin": "builtin",
            "structure": Object {
              "a": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "b": ParseNode {
                "baseType": "str",
                "kind": "type",
                "origin": "builtin",
              },
              "c": ParseNode {
                "baseType": "fn",
                "kind": "type",
                "origin": "builtin",
                "parameters": Array [],
                "returns": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
              "d": ParseNode {
                "baseType": "fn",
                "kind": "type",
                "origin": "builtin",
                "parameters": Array [],
                "returns": ParseNode {
                  "baseType": "fn",
                  "kind": "type",
                  "origin": "builtin",
                  "parameters": Array [],
                  "returns": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                },
              },
            },
          },
        },
        "type": ParseNode {
          "baseType": "fn",
          "kind": "type",
          "origin": "builtin",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
  ParseNode {
    "kind": "assign",
    "left": ParseNode {
      "index": "c",
      "kind": "access",
      "method": "dot",
      "target": ParseNode {
        "kind": "identifier",
        "name": "myObj",
        "type": ParseNode {
          "baseType": "obj",
          "kind": "type",
          "origin": "builtin",
          "structure": Object {
            "a": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
            "b": ParseNode {
              "baseType": "str",
              "kind": "type",
              "origin": "builtin",
            },
            "c": ParseNode {
              "baseType": "fn",
              "kind": "type",
              "origin": "builtin",
              "parameters": Array [],
              "returns": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
            "d": ParseNode {
              "baseType": "fn",
              "kind": "type",
              "origin": "builtin",
              "parameters": Array [],
              "returns": ParseNode {
                "baseType": "fn",
                "kind": "type",
                "origin": "builtin",
                "parameters": Array [],
                "returns": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
            },
          },
        },
      },
      "type": ParseNode {
        "baseType": "fn",
        "kind": "type",
        "origin": "builtin",
        "parameters": Array [],
        "returns": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
    },
    "operator": "=",
    "right": ParseNode {
      "body": Array [
        ParseNode {
          "kind": "return",
          "value": ParseNode {
            "kind": "binary",
            "left": ParseNode {
              "index": "a",
              "kind": "access",
              "method": "dot",
              "target": ParseNode {
                "kind": "this",
                "type": ParseNode {
                  "baseType": "obj",
                  "kind": "type",
                  "origin": "builtin",
                  "structure": Object {
                    "a": ParseNode {
                      "baseType": "int",
                      "kind": "type",
                      "origin": "builtin",
                    },
                    "b": ParseNode {
                      "baseType": "str",
                      "kind": "type",
                      "origin": "builtin",
                    },
                    "c": ParseNode {
                      "baseType": "fn",
                      "kind": "type",
                      "origin": "builtin",
                      "parameters": Array [],
                      "returns": ParseNode {
                        "baseType": "int",
                        "kind": "type",
                        "origin": "builtin",
                      },
                    },
                    "d": ParseNode {
                      "baseType": "fn",
                      "kind": "type",
                      "origin": "builtin",
                      "parameters": Array [],
                      "returns": ParseNode {
                        "baseType": "fn",
                        "kind": "type",
                        "origin": "builtin",
                        "parameters": Array [],
                        "returns": ParseNode {
                          "baseType": "int",
                          "kind": "type",
                          "origin": "builtin",
                        },
                      },
                    },
                  },
                },
              },
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
            "operator": "+",
            "right": ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "value": 45,
            },
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      ],
      "kind": "literal",
      "parameters": Array [],
      "returns": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "type": ParseNode {
        "baseType": "fn",
        "kind": "type",
        "origin": "builtin",
        "parameters": Array [],
        "returns": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
    },
    "type": ParseNode {
      "baseType": "fn",
      "kind": "type",
      "origin": "builtin",
      "parameters": Array [],
      "returns": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
  ParseNode {
    "identifier": "myResult2",
    "kind": "let",
    "value": ParseNode {
      "arguments": Array [],
      "kind": "call",
      "target": ParseNode {
        "index": "c",
        "kind": "access",
        "method": "dot",
        "target": ParseNode {
          "kind": "identifier",
          "name": "myObj",
          "type": ParseNode {
            "baseType": "obj",
            "kind": "type",
            "origin": "builtin",
            "structure": Object {
              "a": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "b": ParseNode {
                "baseType": "str",
                "kind": "type",
                "origin": "builtin",
              },
              "c": ParseNode {
                "baseType": "fn",
                "kind": "type",
                "origin": "builtin",
                "parameters": Array [],
                "returns": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
              "d": ParseNode {
                "baseType": "fn",
                "kind": "type",
                "origin": "builtin",
                "parameters": Array [],
                "returns": ParseNode {
                  "baseType": "fn",
                  "kind": "type",
                  "origin": "builtin",
                  "parameters": Array [],
                  "returns": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                },
              },
            },
          },
        },
        "type": ParseNode {
          "baseType": "fn",
          "kind": "type",
          "origin": "builtin",
          "parameters": Array [],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;
