// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Control flow if [COMPL] if 1`] = `"if(KYTHERA.value.eq(new KYTHERA.value(true, (KYTHERA.type.PRIMITIVES.bool)), KYTHERA.LITERALS.true).value) {new KYTHERA.value(true, (KYTHERA.type.PRIMITIVES.bool));};"`;

exports[`Control flow if [COMPL] if-else 1`] = `"if(KYTHERA.value.eq(new KYTHERA.value(false, (KYTHERA.type.PRIMITIVES.bool)), KYTHERA.LITERALS.true).value) {new KYTHERA.value(false, (KYTHERA.type.PRIMITIVES.bool));} else {new KYTHERA.value(true, (KYTHERA.type.PRIMITIVES.bool));};"`;

exports[`Control flow if [COMPL] if-else with boolean 1`] = `"let a = new KYTHERA.value(1, (KYTHERA.type.PRIMITIVES.int));let b = new KYTHERA.value(2, (KYTHERA.type.PRIMITIVES.int));if(KYTHERA.value.eq((KYTHERA.value.eq(a, b)), KYTHERA.LITERALS.true).value) {a;} else {b;};"`;

exports[`Control flow if [COMPL] if-else-if 1`] = `"let a = new KYTHERA.value(3, (KYTHERA.type.PRIMITIVES.int));if(KYTHERA.value.eq((KYTHERA.value.eq(a, new KYTHERA.value(1, (KYTHERA.type.PRIMITIVES.int)))), KYTHERA.LITERALS.true).value) {new KYTHERA.value(\\"one\\", (KYTHERA.type.PRIMITIVES.str));} else {if(KYTHERA.value.eq((KYTHERA.value.eq(a, new KYTHERA.value(2, (KYTHERA.type.PRIMITIVES.int)))), KYTHERA.LITERALS.true).value) {new KYTHERA.value(\\"two\\", (KYTHERA.type.PRIMITIVES.str));} else {new KYTHERA.value(\\"something else\\", (KYTHERA.type.PRIMITIVES.str));};};"`;

exports[`Control flow if [COMPL] if-else-if with boolean 1`] = `"let a = new KYTHERA.value(1, (KYTHERA.type.PRIMITIVES.int));let b = new KYTHERA.value(2, (KYTHERA.type.PRIMITIVES.int));let c = new KYTHERA.value(3, (KYTHERA.type.PRIMITIVES.int));let result = (KYTHERA.type.PRIMITIVES.str).makeNew();if(KYTHERA.value.eq((KYTHERA.value.eq(a, b)), KYTHERA.LITERALS.true).value) {(result = new KYTHERA.value(\\"a equals b\\", (KYTHERA.type.PRIMITIVES.str)));} else {if(KYTHERA.value.eq((KYTHERA.value.eq(b, c)), KYTHERA.LITERALS.true).value) {(result = new KYTHERA.value(\\"b equals c\\", (KYTHERA.type.PRIMITIVES.str)));} else {(result = new KYTHERA.value(\\"neither\\", (KYTHERA.type.PRIMITIVES.str)));};};"`;

exports[`Control flow if [EVALT] if 1`] = `Object {}`;

exports[`Control flow if [EVALT] if-else 1`] = `Object {}`;

exports[`Control flow if [EVALT] if-else with boolean 1`] = `
Object {
  "a":  {
    "type":  {
      "baseType": "int",
    },
    "value": 1,
  },
  "b":  {
    "type":  {
      "baseType": "int",
    },
    "value": 2,
  },
}
`;

exports[`Control flow if [EVALT] if-else-if 1`] = `
Object {
  "a":  {
    "type":  {
      "baseType": "int",
    },
    "value": 3,
  },
}
`;

exports[`Control flow if [EVALT] if-else-if with boolean 1`] = `
Object {
  "a":  {
    "type":  {
      "baseType": "int",
    },
    "value": 1,
  },
  "b":  {
    "type":  {
      "baseType": "int",
    },
    "value": 2,
  },
  "c":  {
    "type":  {
      "baseType": "int",
    },
    "value": 3,
  },
  "result":  {
    "type":  {
      "baseType": "str",
    },
    "value": "neither",
  },
}
`;

exports[`Control flow if [PARSE] if 1`] = `
Array [
  ParseNode {
    "body": Array [
      ParseNode {
        "kind": "literal",
        "type": ParseNode {
          "baseType": "bool",
          "kind": "type",
          "origin": "builtin",
        },
        "value": true,
      },
    ],
    "condition": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "bool",
        "kind": "type",
        "origin": "builtin",
      },
      "value": true,
    },
    "kind": "if",
  },
]
`;

exports[`Control flow if [PARSE] if-else 1`] = `
Array [
  ParseNode {
    "body": Array [
      ParseNode {
        "kind": "literal",
        "type": ParseNode {
          "baseType": "bool",
          "kind": "type",
          "origin": "builtin",
        },
        "value": false,
      },
    ],
    "condition": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "bool",
        "kind": "type",
        "origin": "builtin",
      },
      "value": false,
    },
    "else": Array [
      ParseNode {
        "kind": "literal",
        "type": ParseNode {
          "baseType": "bool",
          "kind": "type",
          "origin": "builtin",
        },
        "value": true,
      },
    ],
    "kind": "if",
  },
]
`;

exports[`Control flow if [PARSE] if-else with boolean 1`] = `
Array [
  ParseNode {
    "identifier": "a",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "value": 1,
    },
  },
  ParseNode {
    "identifier": "b",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "value": 2,
    },
  },
  ParseNode {
    "body": Array [
      ParseNode {
        "kind": "identifier",
        "name": "a",
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
    ],
    "condition": ParseNode {
      "kind": "binary",
      "left": ParseNode {
        "kind": "identifier",
        "name": "a",
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
      "operator": "==",
      "right": ParseNode {
        "kind": "identifier",
        "name": "b",
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
    "else": Array [
      ParseNode {
        "kind": "identifier",
        "name": "b",
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
    ],
    "kind": "if",
  },
]
`;

exports[`Control flow if [PARSE] if-else-if 1`] = `
Array [
  ParseNode {
    "identifier": "a",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "value": 3,
    },
  },
  ParseNode {
    "body": Array [
      ParseNode {
        "kind": "literal",
        "type": ParseNode {
          "baseType": "str",
          "kind": "type",
          "origin": "builtin",
        },
        "value": "one",
      },
    ],
    "condition": ParseNode {
      "kind": "binary",
      "left": ParseNode {
        "kind": "identifier",
        "name": "a",
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
      "operator": "==",
      "right": ParseNode {
        "kind": "literal",
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
        "value": 1,
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
    "else": Array [
      ParseNode {
        "body": Array [
          ParseNode {
            "kind": "literal",
            "type": ParseNode {
              "baseType": "str",
              "kind": "type",
              "origin": "builtin",
            },
            "value": "two",
          },
        ],
        "condition": ParseNode {
          "kind": "binary",
          "left": ParseNode {
            "kind": "identifier",
            "name": "a",
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
          "operator": "==",
          "right": ParseNode {
            "kind": "literal",
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
            "value": 2,
          },
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
        "else": Array [
          ParseNode {
            "kind": "literal",
            "type": ParseNode {
              "baseType": "str",
              "kind": "type",
              "origin": "builtin",
            },
            "value": "something else",
          },
        ],
        "kind": "if",
      },
    ],
    "kind": "if",
  },
]
`;

exports[`Control flow if [PARSE] if-else-if with boolean 1`] = `
Array [
  ParseNode {
    "identifier": "a",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "value": 1,
    },
  },
  ParseNode {
    "identifier": "b",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "value": 2,
    },
  },
  ParseNode {
    "identifier": "c",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "value": 3,
    },
  },
  ParseNode {
    "identifier": "result",
    "kind": "let",
    "value": ParseNode {
      "kind": "new",
      "target": ParseNode {
        "baseType": "str",
        "kind": "type",
        "origin": "builtin",
      },
      "type": ParseNode {
        "baseType": "str",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
  ParseNode {
    "body": Array [
      ParseNode {
        "kind": "assign",
        "left": ParseNode {
          "kind": "identifier",
          "name": "result",
          "type": ParseNode {
            "baseType": "str",
            "kind": "type",
            "origin": "builtin",
          },
        },
        "operator": "=",
        "right": ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "str",
            "kind": "type",
            "origin": "builtin",
          },
          "value": "a equals b",
        },
        "type": ParseNode {
          "baseType": "str",
          "kind": "type",
          "origin": "builtin",
        },
      },
    ],
    "condition": ParseNode {
      "kind": "binary",
      "left": ParseNode {
        "kind": "identifier",
        "name": "a",
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
      "operator": "==",
      "right": ParseNode {
        "kind": "identifier",
        "name": "b",
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
    "else": Array [
      ParseNode {
        "body": Array [
          ParseNode {
            "kind": "assign",
            "left": ParseNode {
              "kind": "identifier",
              "name": "result",
              "type": ParseNode {
                "baseType": "str",
                "kind": "type",
                "origin": "builtin",
              },
            },
            "operator": "=",
            "right": ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "str",
                "kind": "type",
                "origin": "builtin",
              },
              "value": "b equals c",
            },
            "type": ParseNode {
              "baseType": "str",
              "kind": "type",
              "origin": "builtin",
            },
          },
        ],
        "condition": ParseNode {
          "kind": "binary",
          "left": ParseNode {
            "kind": "identifier",
            "name": "b",
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
          "operator": "==",
          "right": ParseNode {
            "kind": "identifier",
            "name": "c",
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
        "else": Array [
          ParseNode {
            "kind": "assign",
            "left": ParseNode {
              "kind": "identifier",
              "name": "result",
              "type": ParseNode {
                "baseType": "str",
                "kind": "type",
                "origin": "builtin",
              },
            },
            "operator": "=",
            "right": ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "str",
                "kind": "type",
                "origin": "builtin",
              },
              "value": "neither",
            },
            "type": ParseNode {
              "baseType": "str",
              "kind": "type",
              "origin": "builtin",
            },
          },
        ],
        "kind": "if",
      },
    ],
    "kind": "if",
  },
]
`;

exports[`Control flow while [COMPL] while 1`] = `"let a = new KYTHERA.value(0, (KYTHERA.type.PRIMITIVES.int));let b = new KYTHERA.value(0, (KYTHERA.type.PRIMITIVES.int));while(KYTHERA.value.eq((KYTHERA.value.eq(a, b)), KYTHERA.LITERALS.true).value) {(a = (KYTHERA.value.add(a, new KYTHERA.value(2, (KYTHERA.type.PRIMITIVES.int)))));};"`;

exports[`Control flow while [COMPL] while 2`] = `"let x = new KYTHERA.value(0, (KYTHERA.type.PRIMITIVES.int));while(KYTHERA.value.eq((KYTHERA.value.lt(x, new KYTHERA.value(10, (KYTHERA.type.PRIMITIVES.int)))), KYTHERA.LITERALS.true).value) {(x = (KYTHERA.value.add(x, new KYTHERA.value(1, (KYTHERA.type.PRIMITIVES.int)))));};x;"`;

exports[`Control flow while [EVALT] while 1`] = `
Object {
  "a":  {
    "type":  {
      "baseType": "int",
    },
    "value": 2,
  },
  "b":  {
    "type":  {
      "baseType": "int",
    },
    "value": 0,
  },
}
`;

exports[`Control flow while [EVALT] while 2`] = `
Object {
  "x":  {
    "type":  {
      "baseType": "int",
    },
    "value": 10,
  },
}
`;

exports[`Control flow while [PARSE] while 1`] = `
Array [
  ParseNode {
    "identifier": "a",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "value": 0,
    },
  },
  ParseNode {
    "identifier": "b",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "value": 0,
    },
  },
  ParseNode {
    "body": Array [
      ParseNode {
        "kind": "assign",
        "left": ParseNode {
          "kind": "identifier",
          "name": "a",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
        "operator": "=",
        "right": ParseNode {
          "kind": "binary",
          "left": ParseNode {
            "kind": "identifier",
            "name": "a",
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
          "operator": "+",
          "right": ParseNode {
            "kind": "literal",
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
            "value": 2,
          },
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
    ],
    "condition": ParseNode {
      "kind": "binary",
      "left": ParseNode {
        "kind": "identifier",
        "name": "a",
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
      "operator": "==",
      "right": ParseNode {
        "kind": "identifier",
        "name": "b",
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
    "kind": "while",
  },
]
`;

exports[`Control flow while [PARSE] while 2`] = `
Array [
  ParseNode {
    "identifier": "x",
    "kind": "let",
    "value": ParseNode {
      "kind": "literal",
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "value": 0,
    },
  },
  ParseNode {
    "body": Array [
      ParseNode {
        "kind": "assign",
        "left": ParseNode {
          "kind": "identifier",
          "name": "x",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
        "operator": "=",
        "right": ParseNode {
          "kind": "binary",
          "left": ParseNode {
            "kind": "identifier",
            "name": "x",
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
          "operator": "+",
          "right": ParseNode {
            "kind": "literal",
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
            "value": 1,
          },
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
    ],
    "condition": ParseNode {
      "kind": "binary",
      "left": ParseNode {
        "kind": "identifier",
        "name": "x",
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
      "operator": "<",
      "right": ParseNode {
        "kind": "literal",
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
        "value": 10,
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
    "kind": "while",
  },
  ParseNode {
    "kind": "identifier",
    "name": "x",
    "type": ParseNode {
      "baseType": "int",
      "kind": "type",
      "origin": "builtin",
    },
  },
]
`;
