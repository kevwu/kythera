// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Functions [COMPL] Anonymous function and call 1`] = `"let res = new KYTHERA.value((a) => {let q = new KYTHERA.value(99, (KYTHERA.type.PRIMITIVES.int));let r = q;return q;}, new KYTHERA.type(\\"fn\\", { parameters: [(KYTHERA.type.PRIMITIVES.int)], returns: (KYTHERA.type.PRIMITIVES.int)})).value(new KYTHERA.value(10, (KYTHERA.type.PRIMITIVES.int)));"`;

exports[`Functions [COMPL] Anonymous function modifying parameter 1`] = `"let res = new KYTHERA.value((a) => {return (KYTHERA.value.add(a, new KYTHERA.value(10, (KYTHERA.type.PRIMITIVES.int))));}, new KYTHERA.type(\\"fn\\", { parameters: [(KYTHERA.type.PRIMITIVES.int)], returns: (KYTHERA.type.PRIMITIVES.int)})).value(new KYTHERA.value(5, (KYTHERA.type.PRIMITIVES.int)));"`;

exports[`Functions [COMPL] Fibonacci 1`] = `"let fibo = new KYTHERA.type(\\"fn\\", { parameters: [(KYTHERA.type.PRIMITIVES.int)], returns: (KYTHERA.type.PRIMITIVES.int)}).makeNew();(fibo = new KYTHERA.value((x) => {if(KYTHERA.value.eq((KYTHERA.value.eq(x, new KYTHERA.value(1, (KYTHERA.type.PRIMITIVES.int)))), KYTHERA.LITERALS.true).value) {return new KYTHERA.value(1, (KYTHERA.type.PRIMITIVES.int));};if(KYTHERA.value.eq((KYTHERA.value.eq(x, new KYTHERA.value(0, (KYTHERA.type.PRIMITIVES.int)))), KYTHERA.LITERALS.true).value) {return new KYTHERA.value(0, (KYTHERA.type.PRIMITIVES.int));};return (KYTHERA.value.add(fibo.value((KYTHERA.value.sub(x, new KYTHERA.value(1, (KYTHERA.type.PRIMITIVES.int))))), fibo.value((KYTHERA.value.sub(x, new KYTHERA.value(2, (KYTHERA.type.PRIMITIVES.int)))))));}, new KYTHERA.type(\\"fn\\", { parameters: [(KYTHERA.type.PRIMITIVES.int)], returns: (KYTHERA.type.PRIMITIVES.int)})));let res = fibo.value(new KYTHERA.value(10, (KYTHERA.type.PRIMITIVES.int)));"`;

exports[`Functions [COMPL] Fizzbuzz and call 1`] = `"let fb = (KYTHERA.type.PRIMITIVES.str).makeNew();new KYTHERA.value((count) => {let x = new KYTHERA.value(0, (KYTHERA.type.PRIMITIVES.int));while(KYTHERA.value.eq((KYTHERA.value.lt(x, count)), KYTHERA.LITERALS.true).value) {if(KYTHERA.value.eq((KYTHERA.value.and((KYTHERA.value.eq((KYTHERA.value.mod(x, new KYTHERA.value(3, (KYTHERA.type.PRIMITIVES.int)))), new KYTHERA.value(0, (KYTHERA.type.PRIMITIVES.int)))), (KYTHERA.value.eq((KYTHERA.value.mod(x, new KYTHERA.value(5, (KYTHERA.type.PRIMITIVES.int)))), new KYTHERA.value(0, (KYTHERA.type.PRIMITIVES.int)))))), KYTHERA.LITERALS.true).value) {(fb = KYTHERA.value.add(fb, new KYTHERA.value(\\"fizzbuzz\\", (KYTHERA.type.PRIMITIVES.str))));} else {if(KYTHERA.value.eq((KYTHERA.value.eq((KYTHERA.value.mod(x, new KYTHERA.value(5, (KYTHERA.type.PRIMITIVES.int)))), new KYTHERA.value(0, (KYTHERA.type.PRIMITIVES.int)))), KYTHERA.LITERALS.true).value) {(fb = KYTHERA.value.add(fb, new KYTHERA.value(\\"buzz\\", (KYTHERA.type.PRIMITIVES.str))));} else {if(KYTHERA.value.eq((KYTHERA.value.eq((KYTHERA.value.mod(x, new KYTHERA.value(3, (KYTHERA.type.PRIMITIVES.int)))), new KYTHERA.value(0, (KYTHERA.type.PRIMITIVES.int)))), KYTHERA.LITERALS.true).value) {(fb = KYTHERA.value.add(fb, new KYTHERA.value(\\"fizz\\", (KYTHERA.type.PRIMITIVES.str))));} else {x;};};};(x = (KYTHERA.value.add(x, new KYTHERA.value(1, (KYTHERA.type.PRIMITIVES.int)))));};return new KYTHERA.value(null, (KYTHERA.type.PRIMITIVES.null));}, new KYTHERA.type(\\"fn\\", { parameters: [(KYTHERA.type.PRIMITIVES.int)], returns: (KYTHERA.type.PRIMITIVES.null)})).value(new KYTHERA.value(20, (KYTHERA.type.PRIMITIVES.int)));"`;

exports[`Functions [COMPL] Function with no parameters (with space) 1`] = `"let nullFn = new KYTHERA.value(() => {return new KYTHERA.value(null, (KYTHERA.type.PRIMITIVES.null));}, new KYTHERA.type(\\"fn\\", { parameters: [], returns: (KYTHERA.type.PRIMITIVES.null)}));"`;

exports[`Functions [COMPL] Function with no parameters 1`] = `"let nullFn = new KYTHERA.value(() => {return new KYTHERA.value(null, (KYTHERA.type.PRIMITIVES.null));}, new KYTHERA.type(\\"fn\\", { parameters: [], returns: (KYTHERA.type.PRIMITIVES.null)}));"`;

exports[`Functions [EVALT] Anonymous function and call 1`] = `
Object {
  "res":  {
    "type":  {
      "baseType": "int",
    },
    "value": 99,
  },
}
`;

exports[`Functions [EVALT] Anonymous function modifying parameter 1`] = `
Object {
  "res":  {
    "type":  {
      "baseType": "int",
    },
    "value": 15,
  },
}
`;

exports[`Functions [EVALT] Fibonacci 1`] = `
Object {
  "fibo":  {
    "type":  {
      "baseType": "fn",
      "structure": Object {
        "parameters": Array [
           {
            "baseType": "int",
          },
        ],
        "returns":  {
          "baseType": "int",
        },
      },
    },
    "value": [Function],
  },
  "res":  {
    "type":  {
      "baseType": "int",
    },
    "value": 55,
  },
}
`;

exports[`Functions [EVALT] Fizzbuzz and call 1`] = `
Object {
  "fb":  {
    "type":  {
      "baseType": "str",
    },
    "value": "fizzbuzzfizzbuzzfizzfizzbuzzfizzfizzbuzzfizz",
  },
}
`;

exports[`Functions [EVALT] Function with no parameters (with space) 1`] = `
Object {
  "nullFn":  {
    "type":  {
      "baseType": "fn",
      "structure": Object {
        "parameters": Array [],
        "returns":  {
          "baseType": "null",
        },
      },
    },
    "value": [Function],
  },
}
`;

exports[`Functions [EVALT] Function with no parameters 1`] = `
Object {
  "nullFn":  {
    "type":  {
      "baseType": "fn",
      "structure": Object {
        "parameters": Array [],
        "returns":  {
          "baseType": "null",
        },
      },
    },
    "value": [Function],
  },
}
`;

exports[`Functions [PARSE] Anonymous function and call 1`] = `
Array [
  ParseNode {
    "identifier": "res",
    "kind": "let",
    "value": ParseNode {
      "arguments": Array [
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "value": 10,
        },
      ],
      "kind": "call",
      "target": ParseNode {
        "body": Array [
          ParseNode {
            "identifier": "q",
            "kind": "let",
            "value": ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "value": 99,
            },
          },
          ParseNode {
            "identifier": "r",
            "kind": "let",
            "value": ParseNode {
              "kind": "identifier",
              "name": "q",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
          },
          ParseNode {
            "kind": "return",
            "value": ParseNode {
              "kind": "identifier",
              "name": "q",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
          },
        ],
        "kind": "literal",
        "parameters": Array [
          Object {
            "name": "a",
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        ],
        "returns": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
        "type": ParseNode {
          "baseType": "fn",
          "kind": "type",
          "origin": "builtin",
          "parameters": Array [
            ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          ],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Functions [PARSE] Anonymous function modifying parameter 1`] = `
Array [
  ParseNode {
    "identifier": "res",
    "kind": "let",
    "value": ParseNode {
      "arguments": Array [
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "value": 5,
        },
      ],
      "kind": "call",
      "target": ParseNode {
        "body": Array [
          ParseNode {
            "kind": "return",
            "value": ParseNode {
              "kind": "binary",
              "left": ParseNode {
                "kind": "identifier",
                "name": "a",
                "type": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
              "operator": "+",
              "right": ParseNode {
                "kind": "literal",
                "type": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
                "value": 10,
              },
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
          },
        ],
        "kind": "literal",
        "parameters": Array [
          Object {
            "name": "a",
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        ],
        "returns": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
        "type": ParseNode {
          "baseType": "fn",
          "kind": "type",
          "origin": "builtin",
          "parameters": Array [
            ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          ],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Functions [PARSE] Fibonacci 1`] = `
Array [
  ParseNode {
    "identifier": "fibo",
    "kind": "let",
    "value": ParseNode {
      "kind": "new",
      "target": ParseNode {
        "baseType": "fn",
        "kind": "type",
        "origin": "builtin",
        "parameters": Array [
          ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        ],
        "returns": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
      "type": ParseNode {
        "baseType": "fn",
        "kind": "type",
        "origin": "builtin",
        "parameters": Array [
          ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        ],
        "returns": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
    },
  },
  ParseNode {
    "kind": "assign",
    "left": ParseNode {
      "kind": "identifier",
      "name": "fibo",
      "type": ParseNode {
        "baseType": "fn",
        "kind": "type",
        "origin": "builtin",
        "parameters": Array [
          ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        ],
        "returns": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
    },
    "operator": "=",
    "right": ParseNode {
      "body": Array [
        ParseNode {
          "body": Array [
            ParseNode {
              "kind": "return",
              "value": ParseNode {
                "kind": "literal",
                "type": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
                "value": 1,
              },
            },
          ],
          "condition": ParseNode {
            "kind": "binary",
            "left": ParseNode {
              "kind": "identifier",
              "name": "x",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
            "operator": "==",
            "right": ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "value": 1,
            },
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
          "kind": "if",
        },
        ParseNode {
          "body": Array [
            ParseNode {
              "kind": "return",
              "value": ParseNode {
                "kind": "literal",
                "type": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
                "value": 0,
              },
            },
          ],
          "condition": ParseNode {
            "kind": "binary",
            "left": ParseNode {
              "kind": "identifier",
              "name": "x",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
            "operator": "==",
            "right": ParseNode {
              "kind": "literal",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
              "value": 0,
            },
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
          "kind": "if",
        },
        ParseNode {
          "kind": "return",
          "value": ParseNode {
            "kind": "binary",
            "left": ParseNode {
              "arguments": Array [
                ParseNode {
                  "kind": "binary",
                  "left": ParseNode {
                    "kind": "identifier",
                    "name": "x",
                    "type": ParseNode {
                      "baseType": "int",
                      "kind": "type",
                      "origin": "builtin",
                    },
                  },
                  "operator": "-",
                  "right": ParseNode {
                    "kind": "literal",
                    "type": ParseNode {
                      "baseType": "int",
                      "kind": "type",
                      "origin": "builtin",
                    },
                    "value": 1,
                  },
                  "type": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                },
              ],
              "kind": "call",
              "target": ParseNode {
                "kind": "identifier",
                "name": "fibo",
                "type": ParseNode {
                  "baseType": "fn",
                  "kind": "type",
                  "origin": "builtin",
                  "parameters": Array [
                    ParseNode {
                      "baseType": "int",
                      "kind": "type",
                      "origin": "builtin",
                    },
                  ],
                  "returns": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                },
              },
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
            "operator": "+",
            "right": ParseNode {
              "arguments": Array [
                ParseNode {
                  "kind": "binary",
                  "left": ParseNode {
                    "kind": "identifier",
                    "name": "x",
                    "type": ParseNode {
                      "baseType": "int",
                      "kind": "type",
                      "origin": "builtin",
                    },
                  },
                  "operator": "-",
                  "right": ParseNode {
                    "kind": "literal",
                    "type": ParseNode {
                      "baseType": "int",
                      "kind": "type",
                      "origin": "builtin",
                    },
                    "value": 2,
                  },
                  "type": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                },
              ],
              "kind": "call",
              "target": ParseNode {
                "kind": "identifier",
                "name": "fibo",
                "type": ParseNode {
                  "baseType": "fn",
                  "kind": "type",
                  "origin": "builtin",
                  "parameters": Array [
                    ParseNode {
                      "baseType": "int",
                      "kind": "type",
                      "origin": "builtin",
                    },
                  ],
                  "returns": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                },
              },
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
        },
      ],
      "kind": "literal",
      "parameters": Array [
        Object {
          "name": "x",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      ],
      "returns": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
      "type": ParseNode {
        "baseType": "fn",
        "kind": "type",
        "origin": "builtin",
        "parameters": Array [
          ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        ],
        "returns": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      },
    },
    "type": ParseNode {
      "baseType": "fn",
      "kind": "type",
      "origin": "builtin",
      "parameters": Array [
        ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
      ],
      "returns": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
  ParseNode {
    "identifier": "res",
    "kind": "let",
    "value": ParseNode {
      "arguments": Array [
        ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
          "value": 10,
        },
      ],
      "kind": "call",
      "target": ParseNode {
        "kind": "identifier",
        "name": "fibo",
        "type": ParseNode {
          "baseType": "fn",
          "kind": "type",
          "origin": "builtin",
          "parameters": Array [
            ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          ],
          "returns": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      },
      "type": ParseNode {
        "baseType": "int",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
]
`;

exports[`Functions [PARSE] Fizzbuzz and call 1`] = `
Array [
  ParseNode {
    "identifier": "fb",
    "kind": "let",
    "value": ParseNode {
      "kind": "new",
      "target": ParseNode {
        "baseType": "str",
        "kind": "type",
        "origin": "builtin",
      },
      "type": ParseNode {
        "baseType": "str",
        "kind": "type",
        "origin": "builtin",
      },
    },
  },
  ParseNode {
    "arguments": Array [
      ParseNode {
        "kind": "literal",
        "type": ParseNode {
          "baseType": "int",
          "kind": "type",
          "origin": "builtin",
        },
        "value": 20,
      },
    ],
    "kind": "call",
    "target": ParseNode {
      "body": Array [
        ParseNode {
          "identifier": "x",
          "kind": "let",
          "value": ParseNode {
            "kind": "literal",
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
            "value": 0,
          },
        },
        ParseNode {
          "body": Array [
            ParseNode {
              "body": Array [
                ParseNode {
                  "kind": "assign",
                  "left": ParseNode {
                    "kind": "identifier",
                    "name": "fb",
                    "type": ParseNode {
                      "baseType": "str",
                      "kind": "type",
                      "origin": "builtin",
                    },
                  },
                  "operator": "+=",
                  "right": ParseNode {
                    "kind": "literal",
                    "type": ParseNode {
                      "baseType": "str",
                      "kind": "type",
                      "origin": "builtin",
                    },
                    "value": "fizzbuzz",
                  },
                  "type": ParseNode {
                    "baseType": "str",
                    "kind": "type",
                    "origin": "builtin",
                  },
                },
              ],
              "condition": ParseNode {
                "kind": "binary",
                "left": ParseNode {
                  "kind": "binary",
                  "left": ParseNode {
                    "kind": "binary",
                    "left": ParseNode {
                      "kind": "identifier",
                      "name": "x",
                      "type": ParseNode {
                        "baseType": "int",
                        "kind": "type",
                        "origin": "builtin",
                      },
                    },
                    "operator": "%",
                    "right": ParseNode {
                      "kind": "literal",
                      "type": ParseNode {
                        "baseType": "int",
                        "kind": "type",
                        "origin": "builtin",
                      },
                      "value": 3,
                    },
                    "type": ParseNode {
                      "baseType": "int",
                      "kind": "type",
                      "origin": "builtin",
                    },
                  },
                  "operator": "==",
                  "right": ParseNode {
                    "kind": "literal",
                    "type": ParseNode {
                      "baseType": "int",
                      "kind": "type",
                      "origin": "builtin",
                    },
                    "value": 0,
                  },
                  "type": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                },
                "operator": "&&",
                "right": ParseNode {
                  "kind": "binary",
                  "left": ParseNode {
                    "kind": "binary",
                    "left": ParseNode {
                      "kind": "identifier",
                      "name": "x",
                      "type": ParseNode {
                        "baseType": "int",
                        "kind": "type",
                        "origin": "builtin",
                      },
                    },
                    "operator": "%",
                    "right": ParseNode {
                      "kind": "literal",
                      "type": ParseNode {
                        "baseType": "int",
                        "kind": "type",
                        "origin": "builtin",
                      },
                      "value": 5,
                    },
                    "type": ParseNode {
                      "baseType": "int",
                      "kind": "type",
                      "origin": "builtin",
                    },
                  },
                  "operator": "==",
                  "right": ParseNode {
                    "kind": "literal",
                    "type": ParseNode {
                      "baseType": "int",
                      "kind": "type",
                      "origin": "builtin",
                    },
                    "value": 0,
                  },
                  "type": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                },
                "type": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
              "else": Array [
                ParseNode {
                  "body": Array [
                    ParseNode {
                      "kind": "assign",
                      "left": ParseNode {
                        "kind": "identifier",
                        "name": "fb",
                        "type": ParseNode {
                          "baseType": "str",
                          "kind": "type",
                          "origin": "builtin",
                        },
                      },
                      "operator": "+=",
                      "right": ParseNode {
                        "kind": "literal",
                        "type": ParseNode {
                          "baseType": "str",
                          "kind": "type",
                          "origin": "builtin",
                        },
                        "value": "buzz",
                      },
                      "type": ParseNode {
                        "baseType": "str",
                        "kind": "type",
                        "origin": "builtin",
                      },
                    },
                  ],
                  "condition": ParseNode {
                    "kind": "binary",
                    "left": ParseNode {
                      "kind": "binary",
                      "left": ParseNode {
                        "kind": "identifier",
                        "name": "x",
                        "type": ParseNode {
                          "baseType": "int",
                          "kind": "type",
                          "origin": "builtin",
                        },
                      },
                      "operator": "%",
                      "right": ParseNode {
                        "kind": "literal",
                        "type": ParseNode {
                          "baseType": "int",
                          "kind": "type",
                          "origin": "builtin",
                        },
                        "value": 5,
                      },
                      "type": ParseNode {
                        "baseType": "int",
                        "kind": "type",
                        "origin": "builtin",
                      },
                    },
                    "operator": "==",
                    "right": ParseNode {
                      "kind": "literal",
                      "type": ParseNode {
                        "baseType": "int",
                        "kind": "type",
                        "origin": "builtin",
                      },
                      "value": 0,
                    },
                    "type": ParseNode {
                      "baseType": "int",
                      "kind": "type",
                      "origin": "builtin",
                    },
                  },
                  "else": Array [
                    ParseNode {
                      "body": Array [
                        ParseNode {
                          "kind": "assign",
                          "left": ParseNode {
                            "kind": "identifier",
                            "name": "fb",
                            "type": ParseNode {
                              "baseType": "str",
                              "kind": "type",
                              "origin": "builtin",
                            },
                          },
                          "operator": "+=",
                          "right": ParseNode {
                            "kind": "literal",
                            "type": ParseNode {
                              "baseType": "str",
                              "kind": "type",
                              "origin": "builtin",
                            },
                            "value": "fizz",
                          },
                          "type": ParseNode {
                            "baseType": "str",
                            "kind": "type",
                            "origin": "builtin",
                          },
                        },
                      ],
                      "condition": ParseNode {
                        "kind": "binary",
                        "left": ParseNode {
                          "kind": "binary",
                          "left": ParseNode {
                            "kind": "identifier",
                            "name": "x",
                            "type": ParseNode {
                              "baseType": "int",
                              "kind": "type",
                              "origin": "builtin",
                            },
                          },
                          "operator": "%",
                          "right": ParseNode {
                            "kind": "literal",
                            "type": ParseNode {
                              "baseType": "int",
                              "kind": "type",
                              "origin": "builtin",
                            },
                            "value": 3,
                          },
                          "type": ParseNode {
                            "baseType": "int",
                            "kind": "type",
                            "origin": "builtin",
                          },
                        },
                        "operator": "==",
                        "right": ParseNode {
                          "kind": "literal",
                          "type": ParseNode {
                            "baseType": "int",
                            "kind": "type",
                            "origin": "builtin",
                          },
                          "value": 0,
                        },
                        "type": ParseNode {
                          "baseType": "int",
                          "kind": "type",
                          "origin": "builtin",
                        },
                      },
                      "else": Array [
                        ParseNode {
                          "kind": "identifier",
                          "name": "x",
                          "type": ParseNode {
                            "baseType": "int",
                            "kind": "type",
                            "origin": "builtin",
                          },
                        },
                      ],
                      "kind": "if",
                    },
                  ],
                  "kind": "if",
                },
              ],
              "kind": "if",
            },
            ParseNode {
              "kind": "assign",
              "left": ParseNode {
                "kind": "identifier",
                "name": "x",
                "type": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
              "operator": "=",
              "right": ParseNode {
                "kind": "binary",
                "left": ParseNode {
                  "kind": "identifier",
                  "name": "x",
                  "type": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                },
                "operator": "+",
                "right": ParseNode {
                  "kind": "literal",
                  "type": ParseNode {
                    "baseType": "int",
                    "kind": "type",
                    "origin": "builtin",
                  },
                  "value": 1,
                },
                "type": ParseNode {
                  "baseType": "int",
                  "kind": "type",
                  "origin": "builtin",
                },
              },
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
          ],
          "condition": ParseNode {
            "kind": "binary",
            "left": ParseNode {
              "kind": "identifier",
              "name": "x",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
            "operator": "<",
            "right": ParseNode {
              "kind": "identifier",
              "name": "count",
              "type": ParseNode {
                "baseType": "int",
                "kind": "type",
                "origin": "builtin",
              },
            },
            "type": ParseNode {
              "baseType": "int",
              "kind": "type",
              "origin": "builtin",
            },
          },
          "kind": "while",
        },
        ParseNode {
          "kind": "return",
          "value": ParseNode {
            "kind": "literal",
            "type": ParseNode {
              "baseType": "null",
              "kind": "type",
              "origin": "builtin",
            },
            "value": null,
          },
        },
      ],
      "kind": "literal",
      "parameters": Array [
        Object {
          "name": "count",
          "type": ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        },
      ],
      "returns": ParseNode {
        "baseType": "null",
        "kind": "type",
        "origin": "builtin",
      },
      "type": ParseNode {
        "baseType": "fn",
        "kind": "type",
        "origin": "builtin",
        "parameters": Array [
          ParseNode {
            "baseType": "int",
            "kind": "type",
            "origin": "builtin",
          },
        ],
        "returns": ParseNode {
          "baseType": "null",
          "kind": "type",
          "origin": "builtin",
        },
      },
    },
    "type": ParseNode {
      "baseType": "null",
      "kind": "type",
      "origin": "builtin",
    },
  },
]
`;

exports[`Functions [PARSE] Function with no parameters (with space) 1`] = `
Array [
  ParseNode {
    "identifier": "nullFn",
    "kind": "let",
    "value": ParseNode {
      "body": Array [
        ParseNode {
          "kind": "return",
          "value": ParseNode {
            "kind": "literal",
            "type": ParseNode {
              "baseType": "null",
              "kind": "type",
              "origin": "builtin",
            },
            "value": null,
          },
        },
      ],
      "kind": "literal",
      "parameters": Array [],
      "returns": ParseNode {
        "baseType": "null",
        "kind": "type",
        "origin": "builtin",
      },
      "type": ParseNode {
        "baseType": "fn",
        "kind": "type",
        "origin": "builtin",
        "parameters": Array [],
        "returns": ParseNode {
          "baseType": "null",
          "kind": "type",
          "origin": "builtin",
        },
      },
    },
  },
]
`;

exports[`Functions [PARSE] Function with no parameters 1`] = `
Array [
  ParseNode {
    "identifier": "nullFn",
    "kind": "let",
    "value": ParseNode {
      "body": Array [
        ParseNode {
          "kind": "return",
          "value": ParseNode {
            "kind": "literal",
            "type": ParseNode {
              "baseType": "null",
              "kind": "type",
              "origin": "builtin",
            },
            "value": null,
          },
        },
      ],
      "kind": "literal",
      "parameters": Array [],
      "returns": ParseNode {
        "baseType": "null",
        "kind": "type",
        "origin": "builtin",
      },
      "type": ParseNode {
        "baseType": "fn",
        "kind": "type",
        "origin": "builtin",
        "parameters": Array [],
        "returns": ParseNode {
          "baseType": "null",
          "kind": "type",
          "origin": "builtin",
        },
      },
    },
  },
]
`;
